#! /bin/bash
# vim: set filetype=sh

# Simplifies the usage of Vims client-server functionality with project based
# server names.  See ':help client-server' in Vim.
#
# Tries to get the server name by the currently running Tmux session or
# (if this fails) by the currently activated virtualenv.  Maybe I should a
# more environments to get the server name.  To specify the server name
# by hand, run the script this way: `PVIM_SERVER_NAME=aname pgvim`.

function try_to_set_vim_cmd() {
    local CMD=$1
    if test -z "$VIM_CMD" ; then
        if which $CMD > /dev/null 2> /dev/null ; then
            VIM_CMD=$CMD
        fi
    fi
}

try_to_set_vim_cmd gvim
try_to_set_vim_cmd mvim
try_to_set_vim_cmd vim

if test -z "$VIM_CMD" ; then
    echo Can\'t find a Vim command.
    exit 1
fi

function has_server_name() {
    test ! -z "$PVIM_SERVER_NAME"
    return $?
}

function try_to_set_server_name() {
    local COMMAND=$1
    if ! has_server_name ; then
        echo try to get server name with \'$COMMAND\'
        PVIM_SERVER_NAME=$(eval $COMMAND)
    fi
}

try_to_set_server_name "test -z \"$TMUX\" || tmux display-message -p '#S'"
try_to_set_server_name "test -z \"$VIRTUAL_ENV\" || basename $VIRTUAL_ENV"

if has_server_name ; then
    echo $PVIM_SERVER_NAME
    if test 0 -eq $# ; then
        if $VIM_CMD --serverlist | grep -i "^$PVIM_SERVER_NAME$" ; then
            echo Bring to foreground
            $VIM_CMD --servername $PVIM_SERVER_NAME --remote-expr 'foreground()'
        else
            $VIM_CMD --servername $PVIM_SERVER_NAME
        fi
    else
        $VIM_CMD --servername $PVIM_SERVER_NAME --remote-silent $*
    fi
else
    echo No tmux or virtual env found, so start a new vim. 
    gvim $*
fi

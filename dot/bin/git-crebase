#! /usr/bin/env python
# pylint: disable=invalid-name,missing-docstring
import sys
import os
import commands
import curses

from menu import Menu


def git_to_branch():
    status, out = commands.getstatusoutput(
        'git rev-parse --abbrev-ref --symbolic-full-name @{u}'
    )
    if status == 0:
        return out
    return 'master'


def git_log(rev):
    return commands.getoutput('git log --oneline %s..' % rev)


def parse_log(log):
    return [log_line.split(' ', 1) for log_line in log.splitlines()]


def git_rebase(rebase_actions):
    max_index = 0
    edit_cmd = 'sed -i ""'
    for rev_hash, (action, index) in rebase_actions.items():
        edit_cmd += " -e 's/pick %s/%s %s/'" % (rev_hash, action, rev_hash)
        max_index = max(index, max_index)
    os.environ['GIT_SEQUENCE_EDITOR'] = edit_cmd
    return os.system('git rebase -i HEAD~%s' % (max_index + 1))


HELP = """
  p - (pick) use commit
  r - (reword)use commit, but edit the commit message
  e - (edit) use commit, but stop for amending
  s - (squash) use commit, but meld into previous commit
  f - (fixup) like "squash", but discard this commit's log message

  q - quit
  j - donw
  k - up
  g - select first commit
  G - select last commit
  ? - this help message

  Press any key to continue
"""
# x, exec = run command (the rest of the line) using shell
# TODO: change commit order


class RebaseMenu(Menu):
    def __init__(self, changesets):
        super(RebaseMenu, self).__init__(scroll_offset=3)
        self._changesets = changesets
        self.rebase_actions = {}
        self._key_actions.update({
            ord('q'): lambda *_: False,
            ord('j'): self.select_next,
            ord('k'): self.select_previous,
            ord('g'): self.select_first,
            ord('G'): self.select_last,
            ord('?'): self.display_help,
            ord('p'): self.rebase_action_pick,
            ord('e'): self.build_rebase_action('edit'),
            ord('r'): self.build_rebase_action('reword'),
            ord('s'): self.build_rebase_action('squash'),
            ord('f'): self.build_rebase_action('fixup'),
        })

    def entries(self):
        return self._changesets

    def displayed_text_by_entry(self, entry):
        rev_hash, text = entry
        action_shortcut = self.rebase_actions.get(rev_hash, ' ')[0][0]
        return "%s %s" % (action_shortcut, text)

    def rev_hash(self):
        return self._changesets[self._selected][0]

    def build_rebase_action(self, action_name):
        def __action__(*_):
            self.rebase_actions[self.rev_hash()] = (action_name, self._selected)
        return __action__

    def rebase_action_pick(self, *_):
        if self.rev_hash() in self.rebase_actions:
            del self.rebase_actions[self.rev_hash()]

    @staticmethod
    def display_help(window, _):
        window.refresh()
        window.move(0, 0)
        window.clrtobot()
        for i, line in enumerate(HELP.splitlines()):
            window.addstr(i, 0, line)
        window.clrtobot()
        window.getch()

    def _loop(self, window):
        curses.curs_set(0)
        return super(RebaseMenu, self)._loop(window)


def main(argv):
    if argv:
        rev = argv[0]
    else:
        rev = git_to_branch()
    changesets = parse_log(git_log(rev))
    menu = RebaseMenu(changesets)
    if menu.run():
        if menu.rebase_actions:
            return git_rebase(menu.rebase_actions)
        else:
            return os.system('git rebase -i HEAD~%s' % (menu.selected() + 1))
    else:
        return 1

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))

# -----------------------------------------------------------------------------

PLATFORM=$(uname)
[[ $- == *i* ]] && IS_INTERACTIVE=yes || IS_INTERACTIVE=no

# Exports ---------------------------------------------------------------------

export GPG_TTY="$(tty)"

test ! -z "$TMUX" && export TERM=screen-256color

# report CPU usage for commands running longer than 10 seconds
export REPORTTIME=10

typeset -U path
path=(
  $HOME/.bin
  $HOME/.usr/bin
  /usr/local/bin
  /usr/local/sbin
  $path
)

typeset -U fpath
fpath=(
  $HOME/.zsh/site-functions
  /usr/local/share/zsh/site-functions
  $fpath
)

export LC_ALL=en_GB.utf-8
export LANG=en_GB.utf-8

export EDITOR=vim

export MANPAGER="sh -c \" \
  col -b -x | \
  vim -R -c 'set ft=man nomod nolist laststatus=1 colorcolumn=0 nospell' - \
\""

export LESS_TERMCAP_so=$'\e[7m'
export LESS_TERMCAP_se=$'\e[27m'
export LESS="QRXFPslines %lt-%lb (%Pt-%Pb\%) %f"

export PYTHONSTARTUP=$HOME/.pystartup

if [ -e /usr/local/opt/asdf/asdf.sh ] ; then
  source /usr/local/opt/asdf/asdf.sh
elif [ -e "$HOME/.asdf/asdf.sh" ] ; then
  source "$HOME/.asdf/asdf.sh"
fi

# Prompt ----------------------------------------------------------------------

autoload -U colors ; colors

if [ $UID -eq 0 ] ; then
  caretcolor=$fg_no_bold[red]
elif [ -n "$SSH_CONNECTION" ] ; then
  caretcolor=$fg_bold[yellow]
else
  caretcolor=$fg_bold[blue]
fi

PROMPT="%(?..%{$fg_no_bold[red]%}%?%{$reset_color%} )%{$fg_no_bold[green]%}%~%{$reset_color%} %(1j.%j .)%{$caretcolor%}Â»%{$reset_color%} "

# Aliases and Functions -------------------------------------------------------

alias grep="grep --color"
alias hlcat="pygmentize -f terminal"
alias benchmark-zshrc="time zsh -i -c exit"
alias benchmark-vimrc="time vim +q"
alias gdb='gdb -q'

alias pbpwd="pwd | pbcopy"
pbecho() { /bin/echo -n "$*" | pbcopy }

if test "$PLATFORM" = "Linux" ; then
  alias pbcopy='xsel --clipboard --input'
  alias pbpaste='xsel --clipboard --output'
fi

clean-vim() {
  vim -u <(echo 'set nocompatible\nfiletype plugin on') "$@"
}

### configure `ls` coloring
if which dircolors > /dev/null 2> /dev/null ; then
  # GNU core utils:
  eval "$(dircolors -b)"
  alias ls="ls --color"
else
  # BSD user land:
  export CLICOLOR=
fi

b() {
  if [ -f poetry.lock ] ; then
    poetry run "$@"
  elif [ -f Pipfile ] ; then
    pipenv run "$@"
  else
    bundle exec "$@"
  fi
}

### loop command until it returns an error
kaputt() {
  local i=0
  while (eval $@) {
    i=$(($i + 1))
    echo "$fg_no_bold[green]successful runs $i$reset_color"
  } && \
    echo "$fg_no_bold[red]fail after $i successful runs $reset_color" && \
    say kaputt
}

### `i` simplifies the work with projects: ## https://github.com/mbrendler/i
i() {
  local arr=($@)
  for i in {1..$#} ; do
    if test "$@[i]" = 'cd' ; then
      arr[$i]=dir
      cd "$(command i $arr)"
      return
    fi
  done
  command i "$@"
}

p() { I_ENVIRONMENT=p i "$@" }

define() {
  curl "dict://dict.org/d:$1"
}

# History ---------------------------------------------------------------------

setopt HIST_IGNORE_DUPS      # no duplicated history entries
setopt HIST_IGNORE_SPACE     # ignore commands starting with space
setopt APPEND_HISTORY
setopt EXTENDED_HISTORY      # history contains timestamps
setopt NO_INC_APPEND_HISTORY # history is only updated after closing zsh
setopt NO_SHARE_HISTORY      # history is not shared between zsh processes

export HISTFILE=~/.histfile
export HISTSIZE=10000
export SAVEHIST=10000

# Behavior --------------------------------------------------------------------

setopt INTERACTIVE_COMMENTS
setopt NO_LIST_AMBIGUOUS    # show completion list when completion is inserted
setopt NO_AUTO_MENU
setopt NO_ALWAYS_LASTPROMPT
setopt NO_CORRECT           # no auto correction
setopt NO_CORRECTALL        # no auto correction
setopt AUTO_PUSHD           # pushd via cd
setopt PUSHD_IGNORE_DUPS    # no duplications in directory stack
setopt NO_CDABLEVARS        # do not expand cdable variables
setopt BEEP                 # beep
setopt NO_LIST_BEEP         # no beep when displaying completion list
setopt NO_HIST_BEEP         # no beep when history search

setopt LONG_LIST_JOBS       # display PID when suspending processes

# Completion ------------------------------------------------------------------

if test "$IS_INTERACTIVE" != no ; then
  zmodload -i zsh/complist
  zstyle :compinstall filename "$HOME/.zshrc"

  ### case insensitive completion:
  zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

  zstyle ':completion:*' list-colors ''
  zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

  ### process completion
  zstyle ':completion:*:*:*:*:*' menu select
  zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
  zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"

  ### disable named-directories autocompletion
  zstyle ':completion:*:cd:*' tag-order local-directories directory-stack path-directories

  ### Use caching so that commands like apt and dpkg complete are useable
  zstyle ':completion:*' accept-exact '*(N)'
  zstyle ':completion::complete:*' use-cache 1
  zstyle ':completion::complete:*' cache-path $ZSH_CACHE_DIR

  ### Don't complete uninteresting users
  zstyle ':completion:*:*:*:users' ignored-patterns \
          adm amanda apache at avahi avahi-autoipd beaglidx bin cacti canna \
          clamav daemon dbus distcache dnsmasq dovecot fax ftp games gdm \
          gkrellmd gopher hacluster haldaemon halt hsqldb ident junkbust kdm \
          ldap lp mail mailman mailnull man messagebus  mldonkey mysql nagios \
          named netdump news nfsnobody nobody nscd ntp nut nx obsrun openvpn \
          operator pcap polkitd postfix postgres privoxy pulse pvm quagga radvd \
          rpc rpcuser rpm rtkit scard shutdown squid sshd statd svn sync tftp \
          usbmux uucp vcsa wwwrun xfs '_*'
  ### ... unless we really want to.
  zstyle '*' single-ignored show

  autoload -Uz compinit ; compinit

  ### command completion for kaputt
  compdef -e _command kaputt
fi

# syntax-highlighting ---------------------------------------------------------

if test "$IS_INTERACTIVE" != no ; then
  ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)
  source ~/.usr/plugins/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# Key bindings ----------------------------------------------------------------

bindkey -e

bindkey '\e.' insert-last-word
bindkey '^W' vi-backward-kill-word

autoload -z edit-command-line
zle -N edit-command-line
bindkey '^X^E' edit-command-line

bindkey "^[[3~" delete-char  # delete-key

# Source local zshrc ----------------------------------------------------------

test -e ~/.zshrc_local && source ~/.zshrc_local

# -----------------------------------------------------------------------------

PLATFORM=$(uname)
[[ $- == *i* ]] && IS_INTERACTIVE=yes || IS_INTERACTIVE=no

# Exports ---------------------------------------------------------------------

test ! -z "$TMUX" && export TERM=screen-256color-italic

typeset -U path
path=(
  $HOME/.bin
  $HOME/.usr/bin
  /usr/local/bin
  /usr/local/sbin
  $path
)

fpath=($HOME/.zsh/site-functions $fpath)

export LC_ALL=en_GB.utf-8
export LANG=en_GB.utf-8

export EDITOR=vim

export MANPAGER="\
  col -b -x | \
  vim -R -c 'set ft=man nomod nolist laststatus=1 colorcolumn=0 nospell' -"

### Homebrew *PATH extensions
if test -f /usr/local/bin/brew ; then
  export PYTHONPATH=/usr/local/lib/python2.7/site-packages:$PYTHONPATH
  export NODE_PATH=/usr/local/lib/node_modules:$NODE_PATH
fi

export PYTHONSTARTUP=$HOME/.pystartup

### Initialize rbenv, if its installed
if which rbenv > /dev/null; then
  # The following lines are read from 'rbenv init -'. (this is faster)
  path=("$HOME/.rbenv/shims" $path)
  source "$(/bin/ls -dr /usr/local/Cellar/rbenv/* | head -n 1)/completions/rbenv.zsh"
  rbenv() {
    typeset command
    command="$1"
    test "$#" -gt 0 && shift
    case "$command" in
    rehash|shell)
      eval `rbenv "sh-$command" "$@"`;;
    *)
      command rbenv "$command" "$@";;
    esac
  }
fi

# Prompt ----------------------------------------------------------------------

autoload -U colors ; colors

if test $UID -eq 0 ; then
  caretcolor=$fg_no_bold[red]
elif test ! -z "$SSH_CLIENT" ; then
  caretcolor=$fg_bold[yellow]
else
  caretcolor=$fg_bold[blue]
fi

PROMPT="%(?..%{$fg_no_bold[red]%}%?%{$reset_color%} )%{$fg_no_bold[green]%}%~ %{$caretcolor%}»%{$reset_color%} "

# Aliases and Functions -------------------------------------------------------

alias grep="grep --color"
alias hlcat="source-highlight --output=STDOUT --out-format=esc -i"
alias b="bundle exec"
alias benchmark-zshrc="time zsh -i -c exit"
alias benchmark-vimrc="time vim +q"

alias pbpwd="pwd | pbcopy"
pbecho() { echo "$*" | pbcopy }

if test "$PLATFORM" = "Darwin" ; then
  alias gvim=mvim
elif test "$PLATFORM" = "Linux" ; then
  alias pbcopy='xsel --clipboard --input'
  alias pbpaste='xsel --clipboard --output'
fi

clean-vim() {
  vim -u <(echo 'set nocompatible\nfiletype plugin on') "$@"
}

### configure `ls` coloring
if which dircolors > /dev/null 2> /dev/null ; then
  # Gnu core utils are installed.
  eval "$(TERM=xterm-256color dircolors -b)"
  alias ls="ls --color"
else
  # Use BSD user land.
  export CLICOLOR=
fi

### loop command until it returns an error
kaputt() {
  local i=0
  while (eval $@) {
    i=$(($i + 1))
    echo "$fg_no_bold[green]successful runs $i$reset_color"
  } && \
    echo "$fg_no_bold[red]fail after $i successful runs $reset_color" && \
    say kaputt
}

### find and require tests in an directory
test-dir() {
  local directory="$1"
  find "$directory" -name '*_test.rb' | sed "s/.*/require '.\/&'/"
}

### `i` simplifies the work with projects: ## https://github.com/mbrendler/i
i() {
  if test "$1" = cd ; then
    shift
    cd "$(command i dir "$@")"
  else
    command i "$@"
  fi
}

define() {
  curl "dict://dict.org/d:$1"
}

# History ---------------------------------------------------------------------

setopt HIST_IGNORE_DUPS      # no duplicated history entries
setopt HIST_IGNORE_SPACE     # ignore commands starting with space
setopt APPEND_HISTORY
setopt EXTENDED_HISTORY      # history contains timestamps
setopt NO_INC_APPEND_HISTORY # history is only updated after closing zsh
setopt NO_SHARE_HISTORY      # history is not shared between zsh processes

export HISTFILE=~/.histfile
export HISTSIZE=10000
export SAVEHIST=10000

# Behavior --------------------------------------------------------------------

setopt NO_LIST_AMBIGUOUS    # show completion list when completion is inserted
setopt NO_AUTO_MENU
setopt NO_ALWAYS_LASTPROMPT
setopt NO_CORRECT           # no auto correction
setopt NO_CORRECTALL        # no auto correction
setopt AUTO_PUSHD           # pushd via cd
setopt PUSHD_IGNORE_DUPS    # no duplications in directory stack
setopt NO_CDABLEVARS        # do not expand cdable variables
setopt BEEP                 # beep
setopt NO_LIST_BEEP         # no beep when displaying completion list
setopt NO_HIST_BEEP         # no beep when history search

# Completion ------------------------------------------------------------------

if test "$IS_INTERACTIVE" != no ; then
  zmodload -i zsh/complist
  zstyle :compinstall filename "$HOME/.zshrc"

  ### case insensitive completion:
  zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

  zstyle ':completion:*' list-colors ''
  zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

  ### process completion
  zstyle ':completion:*:*:*:*:*' menu select
  zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
  zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"

  ### disable named-directories autocompletion
  zstyle ':completion:*:cd:*' tag-order local-directories directory-stack path-directories

  ### Use caching so that commands like apt and dpkg complete are useable
  zstyle ':completion:*' accept-exact '*(N)'
  zstyle ':completion::complete:*' use-cache 1
  zstyle ':completion::complete:*' cache-path $ZSH_CACHE_DIR

  ### Don't complete uninteresting users
  zstyle ':completion:*:*:*:users' ignored-patterns \
          adm amanda apache at avahi avahi-autoipd beaglidx bin cacti canna \
          clamav daemon dbus distcache dnsmasq dovecot fax ftp games gdm \
          gkrellmd gopher hacluster haldaemon halt hsqldb ident junkbust kdm \
          ldap lp mail mailman mailnull man messagebus  mldonkey mysql nagios \
          named netdump news nfsnobody nobody nscd ntp nut nx obsrun openvpn \
          operator pcap polkitd postfix postgres privoxy pulse pvm quagga radvd \
          rpc rpcuser rpm rtkit scard shutdown squid sshd statd svn sync tftp \
          usbmux uucp vcsa wwwrun xfs '_*'
  ### ... unless we really want to.
  zstyle '*' single-ignored show

  autoload -Uz compinit ; compinit

  ### command completion for kaputt
  compdef -e _command kaputt
fi

# syntax-highlighting ---------------------------------------------------------

if test "$IS_INTERACTIVE" != no ; then
  ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)
  source ~/.usr/plugins/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# Key bindings ----------------------------------------------------------------

bindkey -e

bindkey '\e.' insert-last-word
bindkey '^W' vi-backward-kill-word

# Jump to next/last word by Alt+f / Alt+b:
bindkey ƒ forward-word   # Alt+f
bindkey ∫ backward-word  # Alt+b
if test "$PLATFORM" = "Darwin" ; then
  bindkey "^[[3~" delete-char  # fn + Backspace on Mac
fi

# Source local zshrc ----------------------------------------------------------

test -e ~/.zshrc_local && source ~/.zshrc_local

# Fortune ---------------------------------------------------------------------

if test "$IS_INTERACTIVE" != no ; then
  fortune -s 2> /dev/null || true
fi

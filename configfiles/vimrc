set nocompatible

let $VIMHOME=expand("$HOME/.vim")

" include plug-ins by vundle plugin:
source $VIMHOME/vundle_config.vim

set t_Co=256
syntax on
"colorscheme evening
colorscheme Mustang

set encoding=utf-8
set autoindent
set hidden " restore history of buffer coming from background
set ruler " show cursor position
set scrolloff=3 " scroll three lines before window start / end
set hlsearch
set incsearch  " highlight search while entering search string
set spelllang=de,en
set spell
set showcmd
set backspace=2
set noantialias
set cpoptions=B$ " cw-like commands mark end with $ instead of deleting.
set modeline
set tildeop

set wildmenu
set wildignore+=.DS_Store
set wildignore+=*.orig
set wildignore+=*.pyc
set wildignore+=*.o
set wildignore+=*.class
set wildignore+=.hg
set wildignore+=.git
set wildignore+=.svn


filetype plugin on
filetype plugin indent on

function! s:setHeaderFiletype()
  let file_no_extension=expand("%:p:r")
  if filereadable(file_no_extension . ".cpp")
    set filetype=cpp
  elseif filereadable(file_no_extension . ".c")
    set filetype=c
  elseif filereadable(file_no_extension . ".m")
    set filetype=objc
  else
    echom "no .cpp, .c or .m file found."
  endif
endfunction

augroup filetypedetect
  " This group is created by vim, so don't use 'autocmd!'.
  autocmd BufRead,BufNewFile *.m setfiletype objc

  autocmd BufRead,BufNewFile *.h call s:setHeaderFiletype()

  " Add html FileType for djangohtml files, to activate some html specific
  " plugins, like SnipeMate-Completion on htmldjango files.
  autocmd FileType htmldjango set ft=htmldjango.html
augroup END


" Completion menu also on omni completion
set completeopt=longest,menuone


if exists('&colorcolumn')
  set colorcolumn=81
endif


if has("gui_running")
  colorscheme pyte
  set ttyfast
  set number
  " defualt: guioptions=aegimrLt
  set guioptions='iecrL'
  set guitablabel=%N\ %M%t
  set columns=88
  set clipboard=unnamed
  set laststatus=2
  set cursorline
  set cursorcolumn

  if hostname() == 'macmini.local'
    set gfn=Monaco:h13
    set lines=55
  elseif hostname() == 'janneke.local'
    " set gfn=Monaco:h14
    set gfn=Menlo:h14
    winpos 653 22
    set antialias
    set lines=63
  elseif hostname() == 'atom'
    set gfn=Monospace\ 9.5
    winpos 298 16
    augroup gui_size
      autocmd!
      autocmd GUIEnter * set lines=37 columns=88
    augroup END
    set nocursorline
    set nocursorcolumn
  elseif hostname() == 'FUE-14'
    set gfn=Monospace\ 9.5
    winpos 663 19
    augroup gui_size
      autocmd!
      autocmd GUIEnter * set lines=52 columns=88
    augroup END
  endif

  if has('mac')
    " Map Apple-ö and Apple ä to previous and next tabs
    nnoremap <D-ö> :tabprevious<CR>
    nnoremap <D-ä> :tabnext<CR>
    vnoremap <D-ö> <ESC>:tabprevious<CR>
    vnoremap <D-ä> <ESC>:tabnext<CR>
    inoremap <D-ö> <ESC>:tabprevious<CR>
    inoremap <D-ä> <ESC>:tabnext<CR>
  endif

  " TODO: maybe remove the following commands
  nnoremap <a-left> b
  nnoremap <a-right> w

  if &diff
    augroup gui_size
      autocmd!
      autocmd GUIEnter * call fullscreen#Start()
      wincmd =
      if isdirectory(argv(0))
        autocmd GUIEnter * call s:dirDiffWithArguments()
      endif
    augroup END
  endif

endif

function! s:dirDiffWithArguments()
  next
  execute "DirDiff" fnameescape(argv(0)) fnameescape(argv(1))
endfunction


let mapleader = ","
nnoremap <Leader>n :TlistClose<CR>:NERDTreeToggle<CR>
nnoremap <Leader>ü :NERDTreeClose<CR>:TlistToggle<CR>
nnoremap <Leader>u :NERDTreeClose<CR>:TlistClose<CR>:GundoToggle<CR>
nnoremap <Leader>b :LustyBufferExplorer<CR>
nnoremap <Leader>m :CommandT<CR>
nnoremap <Leader>t :CommandT<CR>
nnoremap <Leader>f :call fullscreen#Toggle()<CR>
nnoremap <Leader>o :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>
nnoremap <Leader>ev :split $MYVIMRC<CR>
nnoremap <Leader>sv :source $MYVIMRC<CR>
let $FT_DIR = expand("$VIMHOME/after/ftplugin/")
nnoremap <Leader>ef :execute "split " . $FT_DIR . &filetype . ".vim"<CR>
nnoremap <Leader>sf :execute "source " . $FT_DIR . &filetype . ".vim"<CR>
nnoremap <Leader>eh :split $HOME/.hgrc<CR>

let maplocalleader = "_"

" Split line (sister to [J]oin lines)
" The normal use of S is covered by cc, so don't worry about shadowing it.
nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w

" Insert new line without entering insert mode.
nnoremap <S-Enter> O<Esc>j
nnoremap <C-Enter> o<Esc>k

inoremap jk <esc>
inoremap <left> <nop>
inoremap <down> <nop>
inoremap <up> <nop>
inoremap <right> <nop>
noremap <left> <nop>
noremap <down> <nop>
noremap <up> <nop>
noremap <right> <nop>


command! W w
command! Wq wq


command! Now :normal a<C-R>="".strftime('%H:%M %d.%m.%Y')<CR><Esc>


" Options of some plug-ins:
let NERDTreeIgnore = ['\.pyc$', '\.orig$']
let g:session_autosave = 'yes'
let g:session_command_aliases = 1
let Tlist_Inc_Winwidth = 0
let Tlist_GainFocus_On_ToggleOpen = 1
let clam_winpos = 'topleft'
let g:Powerline_symbols = 'fancy'
let g:Powerline_cache_enabled = 1

" let g:syntastic_stl_format = "%E{E:%e} %W{W:%w}"
" set statusline=%<%f\ %h%m%r\ %{SyntasticStatuslineFlag()}%=%-14.(%l,%c%V%)\ %P
let g:syntastic_cpp_compiler = "clang++"


" clang_complete
"" TODO: make this more standard
let LLVM_PREFIX = expand("$HOME/privateroot/opt/llvm/BD2/Release+Asserts/")
if isdirectory(LLVM_PREFIX . "/lib/")
  let g:clang_use_library = 1
  let g:clang_library_path = expand(LLVM_PREFIX . "/lib/")
endif

let g:vim_monty_debug = 1
let g:vim_monty_fallback_python_path = expand('$HOME/privateroot/orr/orr_dir/ve/lib/python*/site-packages')

" Haskell-Mode
let g:haddock_browser = "open"
let g:haddock_browser_callformat = "%s %s"
let g:haddock_indexfiledir = "$HOME/.vim/"

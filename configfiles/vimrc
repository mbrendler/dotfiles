" ----------------------------------------------------------------------------

let $VIMHOME=expand("$HOME/.vim")
let $FT_DIR=expand("$VIMHOME/after/ftplugin/")
let $MANPAGER=""

set nocompatible

" Extend runtimepath with plugin directories ---------------------------------

function! ExtendRuntimepath()
  for plugin_path in split(globpath(expand('~/.usr/plugins/vim'), '*'))
    execute 'set runtimepath+=' . plugin_path
  endfor
endfunction

call ExtendRuntimepath()

" Highlighting ---------------------------------------------------------------

syntax on
colorscheme Mustang

""" highlight trailing whitespace
highlight ExtraWhitespace ctermbg=1 guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter,InsertEnter,InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Behavior -------------------------------------------------------------------

set regexpengine=1 " improves performance with highlighting ruby files
set hidden " restore history of buffer coming from background
set modeline
set clipboard=unnamed,unnamedplus
set ttimeoutlen=100  " decrease timeout for faster insert with 'O'
set ttyfast
set lazyredraw
set shell=~/.zsh/run_script_with_zshrc

" Input ----------------------------------------------------------------------

set nrformats-=octal " No octal number handling with C-a and C-x
set cpoptions=B$ " cw-like commands mark end with $ instead of deleting.
set tildeop
set backspace=2
set spelllang=de,en
set nospell
set mouse=n
set ttymouse=xterm2

" UI -------------------------------------------------------------------------

set antialias
set t_Co=256
set colorcolumn=81
set cursorline
set cursorcolumn
set noerrorbells
let &visualbell = has('mac')
set t_vb=
set scrolloff=3 " scroll three lines before window start / end
set showcmd
set ruler " show cursor position
set hlsearch " highlight search results
set incsearch " highlight search while entering search string

" Format ---------------------------------------------------------------------

set encoding=utf-8
set autoindent
set formatoptions+=j
set formatoptions-=o
set shiftround " When at 3 spaces and I hit >>, go to 4, not 5.
set lisp " '-' is a word character
set expandtab
set shiftwidth=2
set softtabstop=2

" Completion -----------------------------------------------------------------

set wildmenu
set wildignore+=.DS_Store
set wildignore+=*.orig
set wildignore+=*.pyc
set wildignore+=*.o
set wildignore+=*.class
set wildignore+=.hg
set wildignore+=.git
set wildignore+=.svn
set wildignore+=tmp
set wildignore+=.beam

" Completion menu also with omni completion
set completeopt=longest,menuone

" Functions ------------------------------------------------------------------

function! ComputerName()
  if has('mac')
    return substitute(system('scutil --get ComputerName'), "\n", "", "")
  else
    return hostname()
  endif
endfunction

function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', old_name)
  if new_name != '' && new_name != old_name
    if system('git ls-files ' . old_name) == ""
      execute ':saveas ' . new_name
      execute ':silent !rm ' . old_name
      redraw!
    else
      call system('git mv ' . old_name . ' ' . new_name . ' 2> /dev/null')
      execute 'edit ' . new_name
    endif
    execute 'bd ' . old_name
  endif
endfunction

function! SetCHeaderFiletype()
  let file_no_extension=expand("%:p:r")
  if filereadable(file_no_extension . ".cpp")
    set filetype=cpp
  elseif filereadable(file_no_extension . ".c")
    set filetype=c
  elseif filereadable(file_no_extension . ".m")
    set filetype=objc
  endif
endfunction

function! Save_buffer_if_modified()
  if &modified == 1
    write
  endif
endfunction

function! Run_file(filename)
  let l:prefix = substitute(&filetype, "^.", "\\U&", "")
  execute 'call ' . l:prefix . '_run("' . a:filename . '")'
endfunction

function! Run_interactive_file(filename)
  let l:prefix = substitute(&filetype, "^.", "\\U&", "")
  execute 'call ' . l:prefix . '_run_interactive("' . a:filename . '")'
endfunction

function! SourceLocalVimrc()
  let local_vimrc = findfile('.vimrc', ';')
  if local_vimrc != "" && expand('~/.vimrc') != fnamemodify(local_vimrc, ':p')
    execute "source " . fnamemodify(local_vimrc, ':p')
  endif
endfunction

function! Rtfm_perfom(search, command, filetype)
  let l:manual = system(a:command)
  if v:shell_error == 0
    tabnew
    execute "setlocal filetype=" . a:filetype
    setlocal nolist
    setlocal colorcolumn=0
    setlocal nospell
    put! =l:manual
    setlocal nomodified
    setlocal readonly
    nnoremap <buffer> q :bw<cr>
    silent execute "file RTFM-'" . a:search . "'"
    1
    return 1
  else
    echo "no documentation entry for " . a:search
    return 0
  end
endfunction

function! Rtfm_ruby(search)
  call Rtfm_perfom(a:search, "ri --format=rdoc --no-pager " . a:search, "rdoc")
endfunction

function! Rtfm_erlang(search)
  call Rtfm_perfom(a:search, "MANPAGER='col -b -x' erl -man " . a:search, "man")
endfunction

function! Rtfm_elixir(search)
  " TODO: what's the correct filetype?
  if Rtfm_perfom(a:search, "~/.bin/elixir_man " . a:search, "elixir-doc") == 0
    Rtfm_erlang(a:search)
  endif
endfunction

function! Rtfm_vim(search)
  execute "tab help " . a:search
  nnoremap <buffer> q :bw<cr>
endfunction

function! Rtfm_man(search)
  call Rtfm_perfom(a:search, "man -P 'col -b -x' " . a:search, "man")
endfunction

function! Rtfm(search)
  if &filetype == "ruby" || &filetype == "rdoc"
    call Rtfm_ruby(a:search)
  elseif &filetype == "elixir"
    call Rtfm_elixir(a:search)
  elseif &filetype == "erlang"
    call Rtfm_erlang(a:search)
  elseif &filetype == "vim" || &filetype == "help"
    call Rtfm_vim(a:search)
  else
    call Rtfm_man(a:search)
  end
endfunction

function! VisualSelection()
  try
    let a_save = @a
    normal! gv"ay
    return @a
  finally
    let @a = a_save
  endtry
endfunction

nnoremap K :call Rtfm(expand("<cword>"))<CR>
vnoremap K :call Rtfm(VisualSelection())<CR>

" Filetype stuff -------------------------------------------------------------

filetype plugin on
filetype plugin indent on

augroup filetypedetect
  " This group is created by Vim, so don't use 'autocmd!'.

  autocmd BufRead,BufNewFile *.m set filetype=objc
  autocmd BufRead,BufNewFile *.h call SetCHeaderFiletype()

  " Add html FileType for djangohtml files, to activate some html specific
  " plugins, like SnipeMate-Completion on htmldjango files.
  autocmd FileType htmldjango set filetype=htmldjango.html
augroup END

" Mappings -------------------------------------------------------------------

let mapleader = ","

nnoremap <Leader>n :TlistClose<CR>:NERDTreeToggle<CR>
nnoremap <Leader>m :TlistClose<CR>:NERDTreeFind<CR>
nnoremap <Leader>ü :NERDTreeClose<CR>:TlistToggle<CR>
nnoremap <Leader>b :LustyBufferExplorer<CR>
nnoremap <Leader>t :CtrlP<CR>
nnoremap <Leader>r :call RenameFile()<CR>
nnoremap <Leader># :leftabove split #<CR>
nnoremap <Leader>' :rightbelow vsplit #<CR>
nnoremap <Leader><C-w> :%s/\s\+$//g<cr>

nnoremap <Leader>cc :call ChangeWord('ToCamelCaseLower')<CR>
nnoremap <Leader>cC :call ChangeWord('ToCamelCaseUpper')<CR>
nnoremap <Leader>cs :call ChangeWord('ToSnakeCaseLower')<CR>
nnoremap <Leader>cS :call ChangeWord('ToSnakeCaseUpper')<CR>
nnoremap <Leader>cm :call ChangeWord('ToMinusCase')<CR>

nnoremap <Leader>ev :split $MYVIMRC<CR>
nnoremap <Leader>sv :source $MYVIMRC<CR>
nnoremap <Leader>ef :execute "split " . $FT_DIR . &filetype . ".vim"<CR>
nnoremap <Leader>sf :execute "source " . $FT_DIR . &filetype . ".vim"<CR>
nnoremap <Leader>eh :split $HOME/.hgrc<CR>
nnoremap <Leader>eg :split $HOME/.gitconfig<CR>
nnoremap <Leader>es :execute "split $HOME/.vim/snippets/" . &filetype . ".snippets"<CR>
nnoremap <Leader>ee :e %<CR>

nnoremap <Leader>ms :call Tmux_run_command("git status 2>/dev/null \|\| hg st 2>/dev/null")<CR>

let maplocalleader = "ö"

nnoremap <LocalLeader>; :execute "normal! mqA;\e`q"<cr>
nnoremap <LocalLeader>rr :call Save_buffer_if_modified()<cr>:call Run_file(expand('%'))<cr>
nnoremap <LocalLeader>ri :call Save_buffer_if_modified()<cr>:call Run_interactive_file(expand('%'))<cr>

""" Split line (sister to [J]oin lines)
nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w

""" Insert new line without entering insert mode.
nnoremap <S-Enter> O<Esc>j
nnoremap <C-Enter> o<Esc>k

nnoremap j gj
nnoremap k gk

nnoremap ü <C-]>

autocmd BufEnter * if &readonly | nnoremap <buffer> q :q<cr> | endif

""" C-X C-G: relative version of file completions (C-X X-F)
let g:old_cwd = '.'
augroup file_completion_end
  autocmd!
  autocmd CompleteDone * execute "lcd " . g:old_cwd
augroup END
function! RelativeCompletion()
  let g:old_cwd = getcwd()
  lcd %:p:h
  call feedkeys("a\<C-X>\<C-F>")
endfunction
inoremap <C-X><C-G> <esc>:call RelativeCompletion()<cr>

onoremap in( :<c-u>normal! f(vi(<cr>
onoremap il( :<c-u>normal! F)vi(<cr>
onoremap in{ :<c-u>normal! f{vi{<cr>
onoremap il{ :<c-u>normal! F}vi{<cr>
onoremap in[ :<c-u>normal! f[vi[<cr>
onoremap il[ :<c-u>normal! F]vi[<cr>
onoremap in< :<c-u>normal! f<vi<<cr>
onoremap il< :<c-u>normal! F>vi<<cr>

" Commands -------------------------------------------------------------------

command! W w
command! Wq wq

command! Now :normal a<C-R>=strftime('%H:%M %d.%m.%Y')<CR><Esc>
command! Today :normal a<C-R>=strftime('%d.%m.%Y')<CR><Esc>

command! -nargs=+ -complete=shellcmd Rtfm :call Rtfm("<args>")

" Status line ----------------------------------------------------------------

set statusline=%<%f\ %h%m%r\ %{SyntasticStatuslineFlag()}%=%-14.(%l,%c%V%)\ %P

set laststatus=2  " always show status line

""" Change StatusLine, CursorLine and CursorColumn color in insert mode:
augroup ModeDetection
  autocmd InsertEnter *
    \ hi StatusLine guibg=#bb1111 ctermfg=52 ctermbg=255 |
    \ hi CursorLine guibg=#c9d9e9 ctermbg=52 |
    \ hi CursorColumn guibg=#c9d9e9 ctermbg=52
  autocmd InsertLeave *
    \ hi StatusLine guibg=#8090a0 ctermfg=253 ctermbg=238 |
    \ hi CursorLine guibg=#f6f6f6 ctermbg=236 |
    \ hi CursorColumn guibg=#eaeaea ctermbg=236
augroup END

" Plugin Settings ------------------------------------------------------------

let NERDTreeIgnore = ['\.pyc$', '\.orig$']

let g:syntastic_ruby_checkers = ['mri', 'rubocop']
let g:syntastic_cpp_compiler = "clang++"

""" clang_complete
let g:clang_use_library = 1
let g:clang_library_path = "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/"

""" Python
let g:jedi#popup_on_dot = 0
let g:jedi#goto_assignments_command = "<localleader>g"
let g:jedi#goto_definitions_command = "<localleader>d"
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<localleader>n"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<localleader>r"
let g:jedi#show_call_signatures = 0

""" Haskell-Mode
let g:haddock_browser = "open"
let g:haddock_browser_callformat = "%s %s"
let g:haddock_indexfiledir = "$HOME/.vim/"

""" Tag list
let Tlist_Use_Right_Window = 1
let Tlist_Inc_Winwidth = 1
let Tlist_Enable_Fold_Column = 0
let Tlist_Display_Prototype = 0
let Tlist_Display_Tag_Scope = 0

" Find and load local .vimrc -------------------------------------------------

if ! has("gui_running")
  call SourceLocalVimrc()
endif

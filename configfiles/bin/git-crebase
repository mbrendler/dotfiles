#! /usr/bin/env python
# pylint: disable=invalid-name,missing-docstring
import sys
import os
import commands
import curses


def git_log():
    return commands.getoutput('git log --oneline master..')


def parse_log(log):
    return [log_line.split(' ', 1) for log_line in log.splitlines()]


def git_rebase(rebase_actions):
    max_index = 0
    edit_cmd = 'sed -i'
    for rev_hash, (action, index) in rebase_actions.items():
        edit_cmd += " -e 's/pick %s/%s %s/'" % (rev_hash, action, rev_hash)
        max_index = max(index, max_index)
    print repr(rebase_actions)
    os.environ['GIT_SEQUENCE_EDITOR'] = edit_cmd
    return os.system('git rebase -i HEAD~%s' % (max_index + 1))


# p, pick = use commit
# r, reword = use commit, but edit the commit message
# e, edit = use commit, but stop for amending
# s, squash = use commit, but meld into previous commit
# f, fixup = like "squash", but discard this commit's log message
# x, exec = run command (the rest of the line) using shell


class Menu(object):
    SCROLL_OFFSET = 3

    def __init__(self, logs):
        self._logs = logs
        self.selected = 0
        self._top = 0
        self.rebase_actions = {}

    def select_previous(self, window):
        self.selected = min(len(self._logs) - 1, self.selected + 1)
        height, _ = window.getmaxyx()
        if self.selected >= self._top + height - self.SCROLL_OFFSET:
            last_top = len(self._logs) - height
            self._top = min(last_top, self._top + 1)

    def select_next(self, _):
        self.selected = max(0, self.selected - 1)
        if self.selected < self._top + self.SCROLL_OFFSET:
            self._top = max(0, self._top - 1)

    def select_first(self, _):
        self.selected = 0
        self._top = 0

    def select_last(self, window):
        self.selected = len(self._logs) - 1
        height, _ = window.getmaxyx()
        self._top = len(self._logs) - height

    def rev_hash(self):
        return self._logs[self.selected][0]

    def _build_rebase_action(action_name):  # pylint: disable=no-self-argument
        def __action__(self, _):
            self.rebase_actions[self.rev_hash()] = (action_name, self.selected)
        return __action__

    def rebase_action_pick(self, _):
        if self.rev_hash() in self.rebase_actions:
            del self.rebase_actions[self.rev_hash()]

    ACTIONS = {
        ord('j'): select_previous,
        ord('k'): select_next,
        ord('g'): select_first,
        ord('G'): select_last,
        ord('p'): rebase_action_pick,
        ord('e'): _build_rebase_action('edit'),
        ord('r'): _build_rebase_action('reword'),
        ord('s'): _build_rebase_action('squash'),
        ord('f'): _build_rebase_action('fixup'),
    }

    def run(self):
        return curses.wrapper(self._log_selection)

    def _refresh(self, window):
        window.refresh()
        height, width = window.getmaxyx()
        last_line_displayed = self._top + height
        for i, log in enumerate(self._logs[self._top:last_line_displayed]):
            action = self.rebase_actions.get(log[0], ' ')[0][0]
            window.addstr(i, 0, "%s %s" % (action, log[1][:width - 2]))
            window.clrtoeol()
            if self.selected == self._top + i:
                window.chgat(i, 0, curses.A_REVERSE)
            else:
                window.chgat(i, 0, curses.A_NORMAL)

    def _log_selection(self, window):
        while 1:
            self._refresh(window)
            key_code = window.getch()
            if key_code in (27, ord('q')):
                return False
            elif key_code in (curses.KEY_ENTER, 10):
                return True
            else:
                self.ACTIONS.get(key_code, lambda _a, _b: None)(self, window)


def main():
    logs = parse_log(git_log())
    menu = Menu(logs)
    if menu.run():
        branch = commands.getoutput('git rev-parse --abbrev-ref HEAD')
        backup_branch = 'before-c-rebase--%s' % branch
        os.system('git branch %s' % backup_branch)
        if menu.rebase_actions:
            result = git_rebase(menu.rebase_actions)
        else:
            result = os.system('git rebase -i HEAD~%s' % (menu.selected + 1))
        sys.stdout.write('Delete branch %s.\n' % backup_branch)
        return result
    else:
        return 1

if __name__ == '__main__':
    sys.exit(main())

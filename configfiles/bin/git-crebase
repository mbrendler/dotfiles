#! /usr/bin/env python
# pylint: disable=invalid-name,missing-docstring
import sys
import os
import commands
from datetime import datetime

from menu import Menu


def git_log():
    return commands.getoutput('git log --oneline master..')


def git_create_backup_branch():
    branch = commands.getoutput('git rev-parse --abbrev-ref HEAD')
    now = datetime.now().strftime('%Y-%m-%d-%H-%M-%S')
    backup_branch = 'before-c-rebase--%s--%s' % (branch, now)
    os.system('git branch %s' % backup_branch)
    sys.stdout.write("Backup branch '%s' created.\n" % backup_branch)


def parse_log(log):
    return [log_line.split(' ', 1) for log_line in log.splitlines()]


def git_rebase(rebase_actions):
    max_index = 0
    edit_cmd = 'sed -i ""'
    for rev_hash, (action, index) in rebase_actions.items():
        edit_cmd += " -e 's/pick %s/%s %s/'" % (rev_hash, action, rev_hash)
        max_index = max(index, max_index)
    os.environ['GIT_SEQUENCE_EDITOR'] = edit_cmd
    return os.system('git rebase -i HEAD~%s' % (max_index + 1))


# p, pick = use commit
# r, reword = use commit, but edit the commit message
# e, edit = use commit, but stop for amending
# s, squash = use commit, but meld into previous commit
# f, fixup = like "squash", but discard this commit's log message
# x, exec = run command (the rest of the line) using shell


class RebaseMenu(Menu):
    def __init__(self, changesets):
        super(RebaseMenu, self).__init__(scroll_offset=3)
        self._changesets = changesets
        self.rebase_actions = {}
        self._key_actions.update({
            ord('q'): lambda *_: False,
            ord('j'): self.select_next,
            ord('k'): self.select_previous,
            ord('g'): self.select_first,
            ord('G'): self.select_last,
            ord('p'): self.rebase_action_pick,
            ord('e'): self.build_rebase_action('edit'),
            ord('r'): self.build_rebase_action('reword'),
            ord('s'): self.build_rebase_action('squash'),
            ord('f'): self.build_rebase_action('fixup'),
        })

    def entries(self):
        return self._changesets

    def displayed_text_by_entry(self, entry):
        rev_hash, text = entry
        action_shortcut = self.rebase_actions.get(rev_hash, ' ')[0][0]
        return "%s %s" % (action_shortcut, text)

    def rev_hash(self):
        return self._changesets[self._selected][0]

    def build_rebase_action(self, action_name):
        def __action__(*_):
            self.rebase_actions[self.rev_hash()] = (action_name, self._selected)
        return __action__

    def rebase_action_pick(self, *_):
        if self.rev_hash() in self.rebase_actions:
            del self.rebase_actions[self.rev_hash()]


def main():
    changesets = parse_log(git_log())
    menu = RebaseMenu(changesets)
    if menu.run():
        git_create_backup_branch()
        if menu.rebase_actions:
            return git_rebase(menu.rebase_actions)
        else:
            return os.system('git rebase -i HEAD~%s' % (menu.selected() + 1))
    else:
        return 1

if __name__ == '__main__':
    sys.exit(main())
